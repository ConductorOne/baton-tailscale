name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      # Add any environment variables needed to run baton-tailscale
      BATON_API_KEY: ${{ secrets.BATON_API_KEY }}
      BATON_TAILNET: ${{ secrets.BATON_TAILNET }}
      # The following parameters are passed to grant/revoke commands
      CONNECTOR_GRANT: 'role:billing-admin:member:user:uYmTSnEi9711CNTRL'
      CONNECTOR_ENTITLEMENT: 'role:billing-admin:member'
      CONNECTOR_PRINCIPAL_TYPE: 'user'
      CONNECTOR_PRINCIPAL: 'uYmTSnEi9711CNTRL'
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin
      - name: Build baton-tailscale
        run: go build ./cmd/baton-tailscale
      - name: Run baton-tailscale
        run: ./baton-tailscale 
      - name: Check for grant before revoking
        run: |
          ./baton-tailscale 
          baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""
      - name: Revoke grants
        run: |
          ./baton-tailscale 
          ./baton-tailscale --revoke-grant ${{ env.CONNECTOR_GRANT }}
      - name: Check grant was revoked
        run: |
           ./baton-tailscale 
           baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"
      - name: Grant entitlement
        run: | 
          ./baton-tailscale 
          ./baton-tailscale --grant-entitlement ${{ env.CONNECTOR_ENTITLEMENT }} --grant-principal-type ${{ env.CONNECTOR_PRINCIPAL_TYPE }} --grant-principal ${{ env.CONNECTOR_PRINCIPAL }}  --provisioning
      - name: Check grant was re-granted
        run: |
          ./baton-tailscale 
          baton grants --entitlement ${{ env.CONNECTOR_ENTITLEMENT }} --output-format=json | jq -e ".grants | any(.principal.id.resource ==\"${{ env.CONNECTOR_PRINCIPAL }}\")"
